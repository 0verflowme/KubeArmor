// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: kubearmor.proto

package feeder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Health check
type NonceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce int32 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *NonceMessage) Reset() {
	*x = NonceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubearmor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceMessage) ProtoMessage() {}

func (x *NonceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceMessage.ProtoReflect.Descriptor instead.
func (*NonceMessage) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{0}
}

func (x *NonceMessage) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

// audit log
type AuditLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedTime   string `protobuf:"bytes,1,opt,name=UpdatedTime,proto3" json:"UpdatedTime,omitempty"`
	HostName      string `protobuf:"bytes,2,opt,name=HostName,proto3" json:"HostName,omitempty"`
	NamespaceName string `protobuf:"bytes,3,opt,name=NamespaceName,proto3" json:"NamespaceName,omitempty"`
	PodName       string `protobuf:"bytes,4,opt,name=PodName,proto3" json:"PodName,omitempty"`
	ContainerID   string `protobuf:"bytes,5,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	ContainerName string `protobuf:"bytes,6,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	HostPID       int32  `protobuf:"varint,7,opt,name=HostPID,proto3" json:"HostPID,omitempty"`
	Source        string `protobuf:"bytes,8,opt,name=Source,proto3" json:"Source,omitempty"`
	Operation     string `protobuf:"bytes,9,opt,name=Operation,proto3" json:"Operation,omitempty"`
	Resource      string `protobuf:"bytes,10,opt,name=Resource,proto3" json:"Resource,omitempty"`
	Result        string `protobuf:"bytes,11,opt,name=Result,proto3" json:"Result,omitempty"`
	RawData       string `protobuf:"bytes,12,opt,name=RawData,proto3" json:"RawData,omitempty"`
}

func (x *AuditLog) Reset() {
	*x = AuditLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubearmor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLog) ProtoMessage() {}

func (x *AuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLog.ProtoReflect.Descriptor instead.
func (*AuditLog) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{1}
}

func (x *AuditLog) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *AuditLog) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *AuditLog) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *AuditLog) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *AuditLog) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *AuditLog) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *AuditLog) GetHostPID() int32 {
	if x != nil {
		return x.HostPID
	}
	return 0
}

func (x *AuditLog) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AuditLog) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *AuditLog) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *AuditLog) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *AuditLog) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

// system log
type SystemLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedTime   string `protobuf:"bytes,1,opt,name=UpdatedTime,proto3" json:"UpdatedTime,omitempty"`
	HostName      string `protobuf:"bytes,2,opt,name=HostName,proto3" json:"HostName,omitempty"`
	NamespaceName string `protobuf:"bytes,3,opt,name=NamespaceName,proto3" json:"NamespaceName,omitempty"`
	PodName       string `protobuf:"bytes,4,opt,name=PodName,proto3" json:"PodName,omitempty"`
	ContainerID   string `protobuf:"bytes,5,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	ContainerName string `protobuf:"bytes,6,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
	HostPID       int32  `protobuf:"varint,7,opt,name=HostPID,proto3" json:"HostPID,omitempty"`
	PPID          int32  `protobuf:"varint,8,opt,name=PPID,proto3" json:"PPID,omitempty"`
	PID           int32  `protobuf:"varint,9,opt,name=PID,proto3" json:"PID,omitempty"`
	TID           int32  `protobuf:"varint,10,opt,name=TID,proto3" json:"TID,omitempty"`
	UID           int32  `protobuf:"varint,11,opt,name=UID,proto3" json:"UID,omitempty"`
	Comm          string `protobuf:"bytes,12,opt,name=Comm,proto3" json:"Comm,omitempty"`
	Syscall       string `protobuf:"bytes,13,opt,name=Syscall,proto3" json:"Syscall,omitempty"`
	Argnum        int32  `protobuf:"varint,14,opt,name=Argnum,proto3" json:"Argnum,omitempty"`
	Retval        int64  `protobuf:"varint,15,opt,name=Retval,proto3" json:"Retval,omitempty"`
	Data          string `protobuf:"bytes,16,opt,name=Data,proto3" json:"Data,omitempty"`
	ErrorMessage  string `protobuf:"bytes,17,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
}

func (x *SystemLog) Reset() {
	*x = SystemLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubearmor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemLog) ProtoMessage() {}

func (x *SystemLog) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemLog.ProtoReflect.Descriptor instead.
func (*SystemLog) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{2}
}

func (x *SystemLog) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *SystemLog) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *SystemLog) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *SystemLog) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *SystemLog) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *SystemLog) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *SystemLog) GetHostPID() int32 {
	if x != nil {
		return x.HostPID
	}
	return 0
}

func (x *SystemLog) GetPPID() int32 {
	if x != nil {
		return x.PPID
	}
	return 0
}

func (x *SystemLog) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *SystemLog) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *SystemLog) GetUID() int32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *SystemLog) GetComm() string {
	if x != nil {
		return x.Comm
	}
	return ""
}

func (x *SystemLog) GetSyscall() string {
	if x != nil {
		return x.Syscall
	}
	return ""
}

func (x *SystemLog) GetArgnum() int32 {
	if x != nil {
		return x.Argnum
	}
	return 0
}

func (x *SystemLog) GetRetval() int64 {
	if x != nil {
		return x.Retval
	}
	return 0
}

func (x *SystemLog) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *SystemLog) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// reply message
type ReplyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retval int32 `protobuf:"varint,1,opt,name=Retval,proto3" json:"Retval,omitempty"`
}

func (x *ReplyMessage) Reset() {
	*x = ReplyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubearmor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyMessage) ProtoMessage() {}

func (x *ReplyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyMessage.ProtoReflect.Descriptor instead.
func (*ReplyMessage) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{3}
}

func (x *ReplyMessage) GetRetval() int32 {
	if x != nil {
		return x.Retval
	}
	return 0
}

var File_kubearmor_proto protoreflect.FileDescriptor

var file_kubearmor_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x22, 0x24, 0x0a, 0x0c, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22,
	0xee, 0x02, 0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xcb, 0x03, 0x0a, 0x09, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x50, 0x50, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x50,
	0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x50, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x6d, 0x6d,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53,
	0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x72, 0x67, 0x6e, 0x75, 0x6d,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x72, 0x67, 0x6e, 0x75, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x52, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x26,
	0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x52, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x32, 0xb7, 0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x14, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x14, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x35, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x10, 0x2e,
	0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x1a,
	0x14, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x12, 0x37, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x11, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x1a, 0x14, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kubearmor_proto_rawDescOnce sync.Once
	file_kubearmor_proto_rawDescData = file_kubearmor_proto_rawDesc
)

func file_kubearmor_proto_rawDescGZIP() []byte {
	file_kubearmor_proto_rawDescOnce.Do(func() {
		file_kubearmor_proto_rawDescData = protoimpl.X.CompressGZIP(file_kubearmor_proto_rawDescData)
	})
	return file_kubearmor_proto_rawDescData
}

var file_kubearmor_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_kubearmor_proto_goTypes = []interface{}{
	(*NonceMessage)(nil), // 0: feeder.NonceMessage
	(*AuditLog)(nil),     // 1: feeder.AuditLog
	(*SystemLog)(nil),    // 2: feeder.SystemLog
	(*ReplyMessage)(nil), // 3: feeder.ReplyMessage
}
var file_kubearmor_proto_depIdxs = []int32{
	0, // 0: feeder.LogMessage.HealthCheck:input_type -> feeder.NonceMessage
	1, // 1: feeder.LogMessage.AuditLogs:input_type -> feeder.AuditLog
	2, // 2: feeder.LogMessage.SystemLogs:input_type -> feeder.SystemLog
	3, // 3: feeder.LogMessage.HealthCheck:output_type -> feeder.ReplyMessage
	3, // 4: feeder.LogMessage.AuditLogs:output_type -> feeder.ReplyMessage
	3, // 5: feeder.LogMessage.SystemLogs:output_type -> feeder.ReplyMessage
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_kubearmor_proto_init() }
func file_kubearmor_proto_init() {
	if File_kubearmor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kubearmor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubearmor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubearmor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubearmor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kubearmor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kubearmor_proto_goTypes,
		DependencyIndexes: file_kubearmor_proto_depIdxs,
		MessageInfos:      file_kubearmor_proto_msgTypes,
	}.Build()
	File_kubearmor_proto = out.File
	file_kubearmor_proto_rawDesc = nil
	file_kubearmor_proto_goTypes = nil
	file_kubearmor_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogMessageClient is the client API for LogMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogMessageClient interface {
	HealthCheck(ctx context.Context, in *NonceMessage, opts ...grpc.CallOption) (*ReplyMessage, error)
	AuditLogs(ctx context.Context, opts ...grpc.CallOption) (LogMessage_AuditLogsClient, error)
	SystemLogs(ctx context.Context, opts ...grpc.CallOption) (LogMessage_SystemLogsClient, error)
}

type logMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewLogMessageClient(cc grpc.ClientConnInterface) LogMessageClient {
	return &logMessageClient{cc}
}

func (c *logMessageClient) HealthCheck(ctx context.Context, in *NonceMessage, opts ...grpc.CallOption) (*ReplyMessage, error) {
	out := new(ReplyMessage)
	err := c.cc.Invoke(ctx, "/feeder.LogMessage/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logMessageClient) AuditLogs(ctx context.Context, opts ...grpc.CallOption) (LogMessage_AuditLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogMessage_serviceDesc.Streams[0], "/feeder.LogMessage/AuditLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logMessageAuditLogsClient{stream}
	return x, nil
}

type LogMessage_AuditLogsClient interface {
	Send(*AuditLog) error
	CloseAndRecv() (*ReplyMessage, error)
	grpc.ClientStream
}

type logMessageAuditLogsClient struct {
	grpc.ClientStream
}

func (x *logMessageAuditLogsClient) Send(m *AuditLog) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logMessageAuditLogsClient) CloseAndRecv() (*ReplyMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReplyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logMessageClient) SystemLogs(ctx context.Context, opts ...grpc.CallOption) (LogMessage_SystemLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogMessage_serviceDesc.Streams[1], "/feeder.LogMessage/SystemLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logMessageSystemLogsClient{stream}
	return x, nil
}

type LogMessage_SystemLogsClient interface {
	Send(*SystemLog) error
	CloseAndRecv() (*ReplyMessage, error)
	grpc.ClientStream
}

type logMessageSystemLogsClient struct {
	grpc.ClientStream
}

func (x *logMessageSystemLogsClient) Send(m *SystemLog) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logMessageSystemLogsClient) CloseAndRecv() (*ReplyMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReplyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogMessageServer is the server API for LogMessage service.
type LogMessageServer interface {
	HealthCheck(context.Context, *NonceMessage) (*ReplyMessage, error)
	AuditLogs(LogMessage_AuditLogsServer) error
	SystemLogs(LogMessage_SystemLogsServer) error
}

// UnimplementedLogMessageServer can be embedded to have forward compatible implementations.
type UnimplementedLogMessageServer struct {
}

func (*UnimplementedLogMessageServer) HealthCheck(context.Context, *NonceMessage) (*ReplyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedLogMessageServer) AuditLogs(LogMessage_AuditLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method AuditLogs not implemented")
}
func (*UnimplementedLogMessageServer) SystemLogs(LogMessage_SystemLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method SystemLogs not implemented")
}

func RegisterLogMessageServer(s *grpc.Server, srv LogMessageServer) {
	s.RegisterService(&_LogMessage_serviceDesc, srv)
}

func _LogMessage_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogMessageServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feeder.LogMessage/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogMessageServer).HealthCheck(ctx, req.(*NonceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogMessage_AuditLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogMessageServer).AuditLogs(&logMessageAuditLogsServer{stream})
}

type LogMessage_AuditLogsServer interface {
	SendAndClose(*ReplyMessage) error
	Recv() (*AuditLog, error)
	grpc.ServerStream
}

type logMessageAuditLogsServer struct {
	grpc.ServerStream
}

func (x *logMessageAuditLogsServer) SendAndClose(m *ReplyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logMessageAuditLogsServer) Recv() (*AuditLog, error) {
	m := new(AuditLog)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LogMessage_SystemLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogMessageServer).SystemLogs(&logMessageSystemLogsServer{stream})
}

type LogMessage_SystemLogsServer interface {
	SendAndClose(*ReplyMessage) error
	Recv() (*SystemLog, error)
	grpc.ServerStream
}

type logMessageSystemLogsServer struct {
	grpc.ServerStream
}

func (x *logMessageSystemLogsServer) SendAndClose(m *ReplyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logMessageSystemLogsServer) Recv() (*SystemLog, error) {
	m := new(SystemLog)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LogMessage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "feeder.LogMessage",
	HandlerType: (*LogMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _LogMessage_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AuditLogs",
			Handler:       _LogMessage_AuditLogs_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SystemLogs",
			Handler:       _LogMessage_SystemLogs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "kubearmor.proto",
}
